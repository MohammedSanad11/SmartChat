@model SmartChat.Application.Dtos.Conversations.ConversationDto
@{
    Layout = "_Layout";
    ViewData["Title"] = "Chat";
}


<div class="chat-container">
    <div class="chat-header">
        <h3>Conversation</h3>
        <small>Started: @Model.CreatedAt.ToString("dd MMM yyyy HH:mm")</small>
    </div>

    <div class="chat-messages" id="chatMessages">
        @foreach (var msg in Model.messages.OrderBy(m => m.CreatedAt))
        {
            <div class="chat-message @(msg.SenderId == Model.CurrentUserId  ? "mine" : "other")">
                <span class="sender">@msg.SenderName</span>
                <p>@msg.Text</p>
                <span class="time">@msg.CreatedAt.ToString("HH:mm")</span>
            </div>
        }
    </div>

    <div class="chat-input">
        <input type="text" id="messageText" placeholder="Type your message..." />
        <button id="sendMessageBtn">Send</button>
    </div>
</div>

<style>
    .chat-container {
        max-width: 900px;
        margin: 2rem auto;
        background-color: #1A1A1A; /* نفس لون Dashboard */
        padding: 1rem;
        border-radius: 0.5rem;
        display: flex;
        flex-direction: column;
        height: 600px;
    }

    .chat-header {
        border-bottom: 1px solid #333;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
        color: #fff;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding-right: 0.5rem;
    }

    .chat-message {
        margin-bottom: 0.8rem;
        padding: 0.5rem;
        border-radius: 0.5rem;
        max-width: 70%;
        word-wrap: break-word;
        background-color: #2C2C2C;
        color: #fff;
    }

        .chat-message.mine {
            background-color: #3A3A3A;
            margin-left: auto;
        }

        .chat-message.other {
            background-color: #4A4A4A;
            margin-right: auto;
        }

        .chat-message .sender {
            font-weight: bold;
            display: block;
            margin-bottom: 0.3rem;
        }

        .chat-message .time {
            font-size: 0.7rem;
            color: #ccc;
            margin-top: 0.2rem;
            display: block;
        }

    .chat-input {
        display: flex;
        margin-top: 1rem;
        gap: 0.5rem;
    }

    .chat-input input {
        flex: 1;
        padding: 0.5rem;
        border-radius: 0.3rem;
        border: 1px solid #333;
        background-color: #1A1A1A;
        color: #fff;
    }

    .chat-input button {
        background-color: #D4AF47;
        border: none;
        padding: 0.5rem 1rem;
        border-radius: 0.3rem;
        color: #1A1A1A;
        cursor: pointer;
        font-weight: bold;
    }

    .chat-input button:hover {
        background-color: #B8953A;
     }
</style>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.7/signalr.min.js"></script>
    <script>
        const conversationId = '@Model.Id';
        const senderId = '@Model.CurrentUserId';
        const chatMessages = document.getElementById("chatMessages");
        const currentUserId = '@Model.CurrentUserId';

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub?conversationId=" + conversationId)
            .build();

        connection.on("ReceiveMessage", function (msg) {
            const userId = msg.userId || msg.SenderId;
            const text = msg.text || msg.Text;
            const senderName = msg.senderName || msg.SenderName;
            const createdAt = new Date(msg.createdAt || msg.CreatedAt);

            // div رئيسي للرسالة
            const messageDiv = document.createElement("div");
            messageDiv.className = "chat-message " + (msg.userId === currentUserId ? "mine" : "other");

            // اسم المرسل
            const senderSpan = document.createElement("span");
            senderSpan.className = "sender";
            senderSpan.innerText = senderName;

            // نص الرسالة
            const textP = document.createElement("p");
            textP.innerText = text;

            // وقت الرسالة
            const timeSpan = document.createElement("span");
            timeSpan.className = "time";
            timeSpan.innerText = createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

            // ضيفهم بالترتيب
            messageDiv.appendChild(senderSpan);
            messageDiv.appendChild(textP);
            messageDiv.appendChild(timeSpan);

            chatMessages.appendChild(messageDiv);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        });

        connection.start()
            .then(() => {
                console.log("Connection started");
                connection.invoke("JoinConversation", senderId, conversationId)
                    .catch(err => console.error("JoinConversation error:", err.toString()));

                document.getElementById("sendMessageBtn").addEventListener("click", () => {
                    const text = document.getElementById("messageText").value;
                    if (text.trim() !== "") {
                        connection.invoke("SendMessage", senderId, conversationId, text)
                            .catch(err => console.error("SendMessage error:", err.toString()));
                        document.getElementById("messageText").value = "";
                    }
                });
            })
            .catch(err => console.error("Connection failed: ", err.toString()));
    </script>
}
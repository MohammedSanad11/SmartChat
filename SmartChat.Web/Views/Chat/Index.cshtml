@model SmartChat.Web.Views.viewModle.ChatViewModel
@{
    Layout = "DashboardLayout";
}

<style>
    .direct-chat-text {
        max-width: 200px; 
        word-wrap: break-word; 
        font-size: 14px; 
        padding: 8px 12px;
        border-radius: 12px;
    }

    .direct-chat-img {
        width: 35px;
        height: 35px;
        object-fit: cover;
    }
</style>

<div class="card direct-chat direct-chat-primary shadow">
    <div class="card-header">
      
        <div class="card-tools">
            <span class="badge badge-primary">@Model.Messages.Count() Messages</span>
        </div>
    </div>

    <div class="card-body">
        <div class="direct-chat-messages" id="chatBox" style="height:400px; overflow-y:auto;">
            @foreach (var msg in Model.Messages)
            {
                var isMine = msg.SenderId == Model.CurrentUserId;
                <div class="direct-chat-msg @(isMine ? "right" : "left")">
                    <div class="direct-chat-infos clearfix">
                        <span class="direct-chat-name float-@(isMine ? "right" : "left")">
                            @(isMine ? "You" : msg.SenderName)
                        </span>
                        <span class="direct-chat-timestamp float-@(isMine ? "left" : "right")">
                            @msg.CreatedAt.ToString("HH:mm dd/MM")
                        </span>
                    </div>
                        <img class="direct-chat-img" src=@Url.Content("~/imge/default-avatar.png") alt="User Image">
                    <div class="direct-chat-text @(isMine ? "bg-success text-white" : "bg-secondary text-white")">
                        @msg.Text
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="card-footer">
        <div class="input-group">
            <input type="text" id="messageInput" placeholder="Type Message ..." class="form-control">
            <span class="input-group-append">
                <button type="button" id="sendBtn" class="btn btn-primary">
                    <i class="fas fa-paper-plane"></i> Send
                </button>
            </span>
        </div>
    </div>
</div>



@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.0/signalr.min.js"></script>
    <script>
        const conversationId = '@Model.Conversation.Id';
        const senderId = '@Model.CurrentUserId';
        const chatBox = document.getElementById("chatBox");

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chatHub?conversationId=" + conversationId)
            .build();

        connection.on("ReceiveMessage", function (msg) {
            const userId = msg.userId || msg.SenderId;
            const text = msg.text || msg.Text;
            const createdAt = new Date(msg.createdAt || msg.CreatedAt);

            const div = document.createElement("div");
            div.className = "mb-2 text-" + (userId === senderId ? "end" : "start");

            const span = document.createElement("span");
            span.className = "badge rounded-pill " + (userId === senderId ? "bg-success" : "bg-secondary") + " text-white";
            span.innerText = text;

            const timeDiv = document.createElement("div");
            timeDiv.className = "text-muted";
            timeDiv.style.fontSize = "0.8em";
            timeDiv.innerText = createdAt.toLocaleTimeString();

            div.appendChild(span);
            div.appendChild(timeDiv);
            chatBox.appendChild(div);
            chatBox.scrollTop = chatBox.scrollHeight;
        });

        connection.start()
            .then(() => {
                console.log("Connection started");
                connection.invoke("JoinConversation", senderId, conversationId)
                    .catch(err => console.error("JoinConversation error:", err.toString()));

                document.getElementById("sendBtn").addEventListener("click", () => {
                    const text = document.getElementById("messageInput").value;
                    if (text.trim() !== "") {
                        connection.invoke("SendMessage", senderId, conversationId, text)
                            .catch(err => console.error("SendMessage error:", err.toString()));
                        document.getElementById("messageInput").value = "";
                    }
                });
            })
            .catch(err => console.error("Connection failed: ", err.toString()));
    </script>
}